[{"content":"You can view or download the PDF below:\nDownload Resume\n","permalink":"https://jaredgoronkin.com/resume/","summary":"\u003cp\u003eYou can view or download the PDF below:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/files/resume.pdf\"\u003eDownload Resume\u003c/a\u003e\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e","title":"Resume"},{"content":"Hi, I’m Jared, a systems-focused game developer\u0026hellip;\n","permalink":"https://jaredgoronkin.com/about/","summary":"\u003cp\u003eHi, I’m Jared, a systems-focused game developer\u0026hellip;\u003c/p\u003e","title":"About"},{"content":"Overview Echoes in the Mists is a retro-inspired horror Soulslike developed as my graduate capstone at RIT. Designed and built by a small multidisciplinary team, it was powered by my modular gameplay framework Mosaic and recognized at Imagine RIT, the GDC NYS Pavilion, and multiple RIT press features.\nChallenge We aimed to build a punishing yet fair action-horror game that balanced deep systems with rapid iteration. With a limited team and timeline, we needed scalable tools to support player abilities, AI, combat, and environmental interactions—without slowing down content creation or introducing brittle dependencies.\nApproach Led system design and implementation across core gameplay: movement, combat, AI, and world interaction Built the game entirely on Mosaic, allowing rapid creation of new actors and systems without rewriting logic Supported team members (including non-engineers) in extending systems like animation events, modifiers, and scripted sequences Applied data-driven design throughout to maximize reusability and iteration speed Outcome Featured at Imagine RIT 2025, with high public engagement and faculty recognition Selected for the NYS Pavilion at GDC, where I presented the project and Mosaic architecture Backed by RIT and spotlighted on Facebook, RIT News, and the Imagine portal Enabled clean, scalable development of key gameplay mechanics including lock-on targeting, parry windows, boss transitions, and a fully modular backstab system Tech Stack Unity · C# · Mosaic Framework · Modular Design · Utility AI · ScriptableObjects\nLinks Play on Itch.io View on Imagine RIT RIT News Coverage Built on: Mosaic → ","permalink":"https://jaredgoronkin.com/projects/echoes/","summary":"A retro-horror Soulslike built as an RIT capstone project, powered by Mosaic and showcased at GDC and Imagine RIT.","title":"Echoes in the Mists"},{"content":"Project Overview The Data Structure Debug Library is a lightweight C++ utility built to assist students in understanding, visualizing, and debugging their data structure implementations. Developed during my time at SUNY Polytechnic Institute, the tool was developed for CS 240: Data Structures \u0026amp; Algorithms to provide students with meaningful insights into their code’s behavior.\nI served as technical lead on this group project, managing scope and developing the core systems and architectur.By emphasizing modularity and scalability early on in development, we were able to remove bottlnecks and merge conflicts during team collaboration.\nProblem Students in CS 240 often encountered difficulty debugging complex data structures like trees, linked lists, and graphs—especially when recursion, pointer errors, or logical bugs were involved. Traditional step-debugging tools were either too cumbersome or opaque for newer programmers.\nThere was a need for a simple, accessible tool that could log and visualize the runtime state of student implementations without altering their underlying logic or requiring external dependencies.\nMy Approach I led the design of the library’s architecture, collaborating with peers to ensure each module met our goals of clarity, minimal setup, and type safety. I personally implemented [X] and reviewed/integrated.\nNon-intrusive: Easy to drop into existing student projects with minimal setup Header-only: To avoid additional build complexity Templated and flexible: Supporting a variety of student-defined types and implementations Extensible: With core modules for linked lists, binary trees, and other common structures Key Features: log_tree(Node*) – Traverses and outputs tree structure to terminal or file log_list(Node*) – Prints linked list state and pointer relationships Structure-specific checks for null pointers, invalid links, and malformed structure shapes Plaintext outputs that can be used with external visualization tools Outcome Successfully deployed in SUNY Poly\u0026rsquo;s CS 240 course Helped students catch difficult logic errors (e.g. double-frees, orphaned nodes) Reduced time-to-debug in assignment testing Received positive informal feedback from instructors and students alike Technologies Used Language: C++17 Architecture: Header-only modules with minimal dependencies Design goals: Simplicity, safety, and extensibility for educational settings Why It Matters This project showcases:\nMy C++ proficiency, particularly in designing type-safe, reusable utilities Strong educational UX instincts, designing for beginner-level programmers A focus on developer tooling and internal software that improves workflows Ability to own and deliver a solution end-to-end Repository View the source and usage examples here:\nGitHub – Wyrdware/DSDebug\nFuture Improvements Add support for heap and hash table visualizations Integrate with graphical viewers (e.g. Graphviz, HTML outputs) Build a runtime sandbox for interactive demos ","permalink":"https://jaredgoronkin.com/projects/debuglibrary/","summary":"A C++ debug and visualization tool designed to help students understand data structures in real time, used in SUNY Poly\u0026rsquo;s CS 240 course.","title":"Data Structure Debug Library"},{"content":"Overview Mosaic is a modular gameplay framework for Unity that enables designers and developers to build scalable, reusable gameplay systems. It became the architectural foundation for Echoes in the Mists, an RIT capstone game featured at Imagine RIT, spotlighted by Facebook and RIT, and showcased at the 2025 GDC NYS Pavilion.\nChallenge Gameplay systems are often tightly coupled and hard to extend or reuse, especially in student teams. This leads to brittle, one-off solutions and code debt that slows down iteration and limits collaboration.\nApproach Designed a framework that sits between Unity’s GameObject model and the character controller Built modular runtime elements: Behaviors, Modifiers, Decorators, and DataTags Enabled runtime composition and deconstruction of features without code duplication Integrated a utility-based decision system to support modular AI behavior selection Created a unified external interface for interacting with actors abstractly Outcome Used in Echoes in the Mists (view project →), a capstone game showcased at Imagine RIT and GDC Enabled rapid collaboration across disciplines and clean separation of systems Allowed a junior teammate to implement a full animation-matched backstab system in two days—with zero added tech debt—thanks to Mosaic’s reusable structure Resulting features were fully cross-compatible across characters and projects Contributed to RIT\u0026rsquo;s recognition as a top 5 game design school (Princeton Review 2025) Tech Stack Unity · C# · Modular Architecture · ScriptableObjects · Utility AI · Runtime Composition\nCurrent Status Mosaic is undergoing significant structural revisions. The system has been used in multiple Unity projects and is available for review or walkthroughs upon request.\nInterested? If you\u0026rsquo;re building scalable systems, prototyping new gameplay mechanics, or need a tools-focused engineer, I’d love to chat about how Mosaic’s ideas might translate to your pipeline.\nLinks GitHub – Wyrdware/Mosaic Used in: Echoes in the Mists → ","permalink":"https://jaredgoronkin.com/projects/mosaic/","summary":"A modular Unity framework for building scalable, reusable gameplay systems—used in the award-winning Echoes in the Mists and showcased at GDC.","title":"Mosaic"},{"content":"","permalink":"https://jaredgoronkin.com/projects/procgen/","summary":"","title":""}]